<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PZMoe's</title>
    <description>想变得更好的咸鱼iOS开发者</description>
    <link>https://pzmoe.github.io/</link>
    <atom:link href="https://pzmoe.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 18 Apr 2019 15:59:57 +0800</pubDate>
    <lastBuildDate>Thu, 18 Apr 2019 15:59:57 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>流畅性和资源消耗的tips</title>
        <description>&lt;p&gt;参考链接 &lt;a href=&quot;https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios&quot;&gt;https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cpu&quot;&gt;cpu资源消耗问题&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.尽量使用轻量对象代替重量的对象，如用CALayer代替UIView&lt;/li&gt;
  &lt;li&gt;2.不涉及UI操作的对象，尽量放在后台线程创建&lt;/li&gt;
  &lt;li&gt;3.用StoryBoard创建视图对象时，会消耗更多的资源，性能敏感的界面中尽量不使用StoryBoard&lt;/li&gt;
  &lt;li&gt;4.尽量推迟对象建立的时间&lt;/li&gt;
  &lt;li&gt;5.当对象可以复用且复用的代价较低时，可以考虑将对象放入一个缓存池中复用&lt;/li&gt;
  &lt;li&gt;6.特别的 CALayer和UIView :&lt;br /&gt;
 　　CALayer 内部并没有属性，当调用属性方法时，它内部是通过运行时 resolveInstanceMethod 为对象临时添加一个方法，并把对应属性值保存到内部的一个 Dictionary 里，同时还会通知 delegate、创建动画等等，非常消耗资源。UIView 的关于显示相关的属性（比如 frame/bounds/transform）等实际上都是 CALayer 属性映射来的，所以对 UIView 的这些属性进行调整时，消耗的资源要远大于一般的属性。&lt;br /&gt;
 　　应该尽量减少不必要的属性修改&lt;/li&gt;
  &lt;li&gt;7.对象释放时可以放到后台线程去释放&lt;br /&gt;
 tips：把对象捕获到 block 中，然后扔到后台队列去随便发送个消息以避免编译器警告，让对象在后台线程销毁
    &lt;pre&gt;&lt;code class=&quot;language-objectivec&quot;&gt;NSArray *temp = self.array;
self.array = nil;
dispatch_async(queue, ^{
 [tmp class];
});
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;8.在后台线程提前计算好视图布局，并且对视图布局进行缓存&lt;/li&gt;
  &lt;li&gt;9.AutoLayout对于复杂视图会产生严重的性能问题&lt;/li&gt;
  &lt;li&gt;10.大量文本的界面中，文本的宽高计算会占用很大一部分资源，可以考虑使用UILabel内部方法来计算宽高和绘制，需要放到后台线程以免阻塞主线程，或者才用CoreText绘制文本&lt;/li&gt;
  &lt;li&gt;11.常见的文本控件，其排班和绘制都是在主线程中进行的，显示大量文本时，cpu的压力会非常大，可以考虑用TextKit或者更底层的CoreText对对文本进行异步绘制&lt;/li&gt;
  &lt;li&gt;12.使用UIImage或者CGImageSource绘制图片不会立即解码，在CALayer被提交到GPU之前，CGImage中的数据才会解码，发生在主线程之中，不可避免。如果想要绕开这个机制，常见的做法是在后台线程先把图片给绘制到CGBitmapContext中，然后从Bitmap直接创建图片&lt;/li&gt;
  &lt;li&gt;13.由于CoreGraphic方法通常都是线程安全的，所以图像的绘制可以很容易放到后台线程进行
    &lt;pre&gt;&lt;code class=&quot;language-objectivec&quot;&gt;dispatch_async(backgroundQueue, ^{
  CGContextRef ctx = CGBitmapContextCreate(...);
  // draw in context...
  CGImageRef img = CGBitmapContextCreateImage(ctx);
  CFRelease(ctx);
  dispatch_async(mainQueue, ^{
      layer.contents = img;
  });
});
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;14.尽量避免使用圆角、遮罩、阴影等属性，把需要显示的图形在后台线程绘制位图片&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;asdk&quot;&gt;ASDK&lt;/h3&gt;
&lt;p&gt;ASDK是facebook关于iOS界面流畅的库，使用ASNode等相关类将布局、文本排版、图片文字渲染等操作封装成较小的任务，使用GCD异步并发执行，现在改名为Texture&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Apr 2019 17:56:29 +0800</pubDate>
        <link>https://pzmoe.github.io/2019/04/smooth_user_interface/</link>
        <guid isPermaLink="true">https://pzmoe.github.io/2019/04/smooth_user_interface/</guid>
        
        
        <category>iOS</category>
        
        <category>develop</category>
        
      </item>
    
      <item>
        <title>linkTest</title>
        <description>&lt;p&gt;This is &lt;a href=&quot;hanju://seriesLink/aaa?series=_K1yzNbfQe134aKfD03fy&amp;quot;&quot; title=&quot;Title&quot;&gt;aaa&lt;/a&gt; inline link.
This is &lt;a href=&quot;hanju://seriesLink?series=_K1yzNbfQe134aKfD03fy&amp;quot;&quot; title=&quot;Title&quot;&gt;android&lt;/a&gt; inline link.
This is &lt;a href=&quot;hanju://&amp;quot;&quot; title=&quot;Title&quot;&gt;ios&lt;/a&gt; inline link.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 17:59:38 +0800</pubDate>
        <link>https://pzmoe.github.io/2017/06/linktest/</link>
        <guid isPermaLink="true">https://pzmoe.github.io/2017/06/linktest/</guid>
        
        
        <category>link</category>
        
      </item>
    
      <item>
        <title>Hello World - Vno</title>
        <description>&lt;h4 id=&quot;whats-this&quot;&gt;What’s this&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/onevcat/vno-jekyll&quot;&gt;Vno Jekyll&lt;/a&gt; is a theme for &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;. It is a port of my Ghost theme &lt;a href=&quot;https://github.com/onevcat/vno&quot;&gt;vno&lt;/a&gt;, which is originally developed from &lt;a href=&quot;https://github.com/daleanthony/uno&quot;&gt;Dale Anthony’s Uno&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git clone https://github.com/onevcat/vno-jekyll.git your_site
$ cd your_site
$ bundler install
$ bundler exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your site with &lt;code&gt;Vno Jekyll&lt;/code&gt; enabled should be accessible in http://127.0.0.1:4000.&lt;/p&gt;

&lt;p&gt;For more information about Jekyll, please visit &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll’s site&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;configuration&quot;&gt;Configuration&lt;/h4&gt;

&lt;p&gt;All configuration could be done in &lt;code&gt;_config.yml&lt;/code&gt;. Remember you need to restart to serve the page when after changing the config file. Everything in the config file should be self-explanatory.&lt;/p&gt;

&lt;h4 id=&quot;background-image-and-avatar&quot;&gt;Background image and avatar&lt;/h4&gt;

&lt;p&gt;You could replace the background and avatar image in &lt;code&gt;assets/images&lt;/code&gt; folder to change them.&lt;/p&gt;

&lt;h4 id=&quot;sites-using-vno&quot;&gt;Sites using Vno&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://onevcat.com&quot;&gt;My blog&lt;/a&gt; is using &lt;code&gt;Vno Jekyll&lt;/code&gt; as well, you could see how it works in real. There are some other sites using the same theme. You can find them below:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Site Name&lt;/th&gt;
      &lt;th&gt;URL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;OneV’s Den&lt;/td&gt;
      &lt;td&gt;http://onevcat.com&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you happen to be using this theme, welcome to &lt;a href=&quot;https://github.com/onevcat/vno-jekyll/pulls&quot;&gt;send me a pull request&lt;/a&gt; to add your site link here. :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;license&quot;&gt;License&lt;/h4&gt;

&lt;p&gt;Great thanks to &lt;a href=&quot;https://github.com/daleanthony&quot;&gt;Dale Anthony&lt;/a&gt; and his &lt;a href=&quot;https://github.com/daleanthony/uno&quot;&gt;Uno&lt;/a&gt;. Vno Jekyll is based on Uno, and contains a lot of modification on page layout, animation, font and some more things I can not remember. Vno Jekyll is followed with Uno and be licensed as &lt;a href=&quot;http://creativecommons.org/licenses/by/4.0/&quot;&gt;Creative Commons Attribution 4.0 International&lt;/a&gt;. See the link for more information.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Feb 2016 14:32:24 +0800</pubDate>
        <link>https://pzmoe.github.io/2016/02/hello-world-vno/</link>
        <guid isPermaLink="true">https://pzmoe.github.io/2016/02/hello-world-vno/</guid>
        
        
      </item>
    
  </channel>
</rss>
